// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/suliar/GFSender/internal/twilio (interfaces: Client)

// Package twilio_mock is a generated GoMock package.
package twilio_mock

import (
	gomock "github.com/golang/mock/gomock"
	gotwilio "github.com/sfreiberg/gotwilio"
	reflect "reflect"
)

// MockClient is a mock of Client interface
type MockClient struct {
	ctrl     *gomock.Controller
	recorder *MockClientMockRecorder
}

// MockClientMockRecorder is the mock recorder for MockClient
type MockClientMockRecorder struct {
	mock *MockClient
}

// NewMockClient creates a new mock instance
func NewMockClient(ctrl *gomock.Controller) *MockClient {
	mock := &MockClient{ctrl: ctrl}
	mock.recorder = &MockClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockClient) EXPECT() *MockClientMockRecorder {
	return m.recorder
}

// SendSMS mocks base method
func (m *MockClient) SendSMS(arg0, arg1, arg2, arg3, arg4 string) (*gotwilio.SmsResponse, *gotwilio.Exception, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendSMS", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(*gotwilio.SmsResponse)
	ret1, _ := ret[1].(*gotwilio.Exception)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// SendSMS indicates an expected call of SendSMS
func (mr *MockClientMockRecorder) SendSMS(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendSMS", reflect.TypeOf((*MockClient)(nil).SendSMS), arg0, arg1, arg2, arg3, arg4)
}
