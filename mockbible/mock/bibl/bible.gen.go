// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/suliar/GFSender/internal/bible (interfaces: Quoter,Randomer)

// Package bible_mock is a generated GoMock package.
package bible_mock

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockQuoter is a mock of Quoter interface
type MockQuoter struct {
	ctrl     *gomock.Controller
	recorder *MockQuoterMockRecorder
}

// MockQuoterMockRecorder is the mock recorder for MockQuoter
type MockQuoterMockRecorder struct {
	mock *MockQuoter
}

// NewMockQuoter creates a new mock instance
func NewMockQuoter(ctrl *gomock.Controller) *MockQuoter {
	mock := &MockQuoter{ctrl: ctrl}
	mock.recorder = &MockQuoterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockQuoter) EXPECT() *MockQuoterMockRecorder {
	return m.recorder
}

// SendQuote mocks base method
func (m *MockQuoter) SendQuote(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendQuote", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendQuote indicates an expected call of SendQuote
func (mr *MockQuoterMockRecorder) SendQuote(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendQuote", reflect.TypeOf((*MockQuoter)(nil).SendQuote), arg0)
}

// MockRandomer is a mock of Randomer interface
type MockRandomer struct {
	ctrl     *gomock.Controller
	recorder *MockRandomerMockRecorder
}

// MockRandomerMockRecorder is the mock recorder for MockRandomer
type MockRandomerMockRecorder struct {
	mock *MockRandomer
}

// NewMockRandomer creates a new mock instance
func NewMockRandomer(ctrl *gomock.Controller) *MockRandomer {
	mock := &MockRandomer{ctrl: ctrl}
	mock.recorder = &MockRandomerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockRandomer) EXPECT() *MockRandomerMockRecorder {
	return m.recorder
}

// RandomBibleVerses mocks base method
func (m *MockRandomer) RandomBibleVerses(arg0 context.Context) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RandomBibleVerses", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RandomBibleVerses indicates an expected call of RandomBibleVerses
func (mr *MockRandomerMockRecorder) RandomBibleVerses(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RandomBibleVerses", reflect.TypeOf((*MockRandomer)(nil).RandomBibleVerses), arg0)
}
